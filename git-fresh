#!/usr/bin/env python3
from gitz import git_functions
from gitz.env import ENV
from gitz.program import PROGRAM

USAGE = """\
git-fresh: Create and push a fresh branch from a reference branch

USAGE:
    git fresh <branch-name> [...<branch-name>]
"""

HELP = """

"""
_HELP_BRANCHES = 'Names of branches to create'


def git_fresh():
    args = PROGRAM.initialize(USAGE, HELP, _add_arguments)
    git_functions.check_clean_workspace()
    for branch in args.branches:
        _run_fresh(branch)


def _run_fresh(fresh_branch):
    branches = git_functions.branches()
    if fresh_branch in branches:
        PROGRAM.error('Branch name', fresh_branch, 'already exists')

    remotes = PROGRAM.git.remote()
    if len(remotes) == 1:
        origin = upstream = remotes[0]
    else:
        origin = ENV.origin()[0]
        if origin not in remotes:
            PROGRAM.error('Unknown origin', origin)

        upstream = next((u for u in ENV.upstream() if u in remotes), None)
        if upstream is None:
            PROGRAM.error('No upstream found')

    if PROGRAM.called.get('error'):
        PROGRAM.exit()

    PROGRAM.git.fetch(upstream)

    for branch in ENV.reference_branches():
        refspec = '%s/%s' % (upstream, branch)
        if git_functions.commit_id(refspec):
            PROGRAM.git.checkout('-b', fresh_branch, refspec)
            PROGRAM.git.push('-u', origin, fresh_branch)
            return

    PROGRAM.exit('No reference branch found')


def _add_arguments(parser):
    parser.add_argument('branches', nargs='+', help=_HELP_BRANCHES)


if __name__ == '__main__':
    git_fresh()
