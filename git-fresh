#!/usr/bin/env python3
from gitz import git_functions
from gitz.env import ENV
from gitz.program import PROGRAM
from gitz.program import safe_git
from gitz.program import git

SUMMARY = 'Create and push one or more fresh branches'

USAGE = 'git fresh <branch-name> [...<branch-name>]'

HELP = """
Creates one or more fresh branches from the base working branch
and pushes them them to your git origin.

"""
EXAMPLES = """
git fresh foo
   Create a new branch foo and push to the origin

git fresh one two three
   Create three new branches
"""

_HELP_BRANCHES = 'Names of branches to create'


def git_fresh():
    git_functions.check_clean_workspace()
    branches = git_functions.branches()

    new_branches = set(PROGRAM.args.branches)
    existing = new_branches.intersection(branches)
    if existing:
        PROGRAM.error('Cannot overwrite:', *existing)

    protected = new_branches.intersection(ENV.protected_branches())
    if protected:
        PROGRAM.error('Protected:', *protected)

    if PROGRAM.called.get('error'):
        PROGRAM.exit()

    upstream, origin = _upstream_and_origin()
    safe_git.fetch(upstream)
    for branch in PROGRAM.args.branches:
        _run_fresh(branch, branches, origin, upstream)

    PROGRAM.log.message('Created:', ','.join(PROGRAM.args.branches))


def _upstream_and_origin():
    remotes = safe_git.remote()

    if len(remotes) == 1:
        return remotes[0], remotes[0]

    origin = next((u for u in ENV.origin() if u in remotes), None)
    upstream = next((u for u in ENV.upstream() if u in remotes), None)

    if origin not in remotes:
        PROGRAM.error('No origin found')

    if upstream is None:
        PROGRAM.error('No upstream found')

    return upstream, origin


def _run_fresh(fresh_branch, branches, origin, upstream):
    if fresh_branch in branches:
        PROGRAM.error('Branch name', fresh_branch, 'already exists')

    for branch in ENV.reference_branches():
        refspec = '%s/%s' % (upstream, branch)
        if git_functions.commit_id(refspec):
            git.checkout('-b', fresh_branch, refspec, quiet=True)
            git.push('-u', origin, fresh_branch, quiet=True)
            PROGRAM.message('Created fresh branch', fresh_branch)
            return

    PROGRAM.exit('No reference branch found')


def add_arguments(parser):
    add = parser.add_argument
    add('branches', nargs='+', help=_HELP_BRANCHES)
    add('-b', '--base-branch', default='', help=_HELP_BASE_BRANCH)
    add('-f', '--force', action='store_true', help=_HELP_FORCE)
    add('-o', '--origin', action='store_true', help=_HELP_ORIGIN)


_HELP_BASE_BRANCH = 'Branch '
_HELP_FORCE = 'Force push over existing branches'
_HELP_ORIGIN = 'Remote origin to push to'

if __name__ == '__main__':
    PROGRAM.start(**globals())
