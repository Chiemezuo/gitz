#!/usr/bin/env python3
from gitz.git import combine
from gitz.git import functions
from gitz.git import root
from gitz.program import ARGS
from gitz.program import PROGRAM
from gitz.git import GIT

SUMMARY = 'Reorder and delete commits in the current branch'

DANGER = 'Rewrites history!'

HELP = """
Shuffles the commits in the current branch, perhaps deleting some.

For example, ``git shuffle ba`` switches the first and second most
recent commits, ``git shuffle cba`` swaps the first and third
commits, ``git shuffle cab`` pops the third commit to be the most
recent, top commit on the branch.

"""

EXAMPLES = """
git shuffle 10
git shuffle ba
    Switches the first and second most recent commits

git shuffle ab
git shuffle abc
git shuffle 01
git shuffle 012
    Do nothing

git shuffle cab
git shuffle 201
    Cycles the three most recent commits so the third one is first

git shuffle edcg
git shuffle 5437
    Deletes the most recent two commeits, reverses the next three, and
    deletes the sixth.

git shuffle edcg -s 'My message'
git shuffle edcg --squash='My message'
git shuffle 5437 -s "My message"
    Same as the previous command, but squashes the three commits into
    one with the commit message 'My message'
"""


def git_shuffle():
    def report(name, items, symbol):
        if items:
            s = '' if len(items) == 1 else 's'
            PROGRAM.message(len(items), 'commit%s %s' % (s, name))
            for id, msg in items:
                PROGRAM.message('%s %s: %s' % (symbol, id, msg))
            return True

    root.check_clean_workspace()
    shuffle = combine.shuffle(ARGS.shuffle, ARGS.squash)

    if not shuffle:
        PROGRAM.message('No change')
        return

    count = max(shuffle) + 1
    id_msgs = functions.commit_messages(count)
    ids = [id for id, _ in id_msgs]

    base, *shuffle_ids = (ids[i] for i in reversed(shuffle))

    for i in range(count):
        if i not in shuffle:
            print('-', *id_msgs[i])

    GIT.reset('--hard', base)
    for args in combine.combine(shuffle_ids, ARGS.squash):
        PROGRAM.message(*args)


def add_arguments(parser):
    add_arg = parser.add_argument
    add_arg('shuffle', help=_HELP_SHUFFLE)
    combine.add_arguments(parser)


_HELP_SHUFFLE = 'Pattern string to shuffle'

if __name__ == '__main__':
    PROGRAM.start()
