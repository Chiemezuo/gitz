.TH GIT-FOR-EACH 1 "26 December, 2019" "Gitz 0.9.13" "Gitz Manual"

.SH NAME
git-for-each - Perform a command for each branch or directory

.SH SYNOPSIS
.sp
.nf
.ft C
git for-each [-h] [-q] [-v] [-a] [-f] [-i INDENT] [-n] [name [name ...]]
.ft P
.fi


.SH DESCRIPTION
Performs <command> [argument ...] for each \fBname\fP, or over all
branches if no \fBname\fP is given.

.sp
Note that this does not handle aliases within commands and might do
unexpected things with complex commands.  Please handle with care.

.SH OPTIONS
\fB\-h, \-\-help\fP: show this help message and exit

\fB\-q, \-\-quiet\fP: Suppress all output

\fB\-v, \-\-verbose\fP: Report all messages in great detail

\fB\-a, \-\-all\fP: Visit non\-git directories

\fB\-f, \-\-fail\fP: Fail immediately if any git all command fails

\fB\-i INDENT, \-\-indent INDENT\fP: Number of columns to indent output of commands

\fB\-n, \-\-no\-run\fP: If set, commands will be printed but not executed


\fBname\fP: Names of branches or directories to iterate over


.SH DANGER
This is a bit janky

.SH EXAMPLES
.TP
.B \fB git all \- git log \-\-oneline \-5 \fP
Performs git log \-\-oneline \-5 for each branch in this repo

.sp
.TP
.B \fB git all * \- git all \- git log \-\-oneline \-5 \fP
Performs git log \-\-oneline \-5 for each branch in each
directory in the current directory

