.TH GIT-SHUFFLE 1 "07 January, 2020" "Gitz 0.9.13" "Gitz Manual"

.SH NAME
git-shuffle - Reorder and delete commits in the current branch

.SH SYNOPSIS
.sp
.nf
.ft C
git shuffle [-h] [-q] [-v] [-s [SQUASH]] [-n] shuffle
.ft P
.fi


.SH DESCRIPTION
Shuffles the commits in the current branch, perhaps deleting some.

.sp
For example, \fBgit shuffle ba\fP switches the first and second most
recent commits, \fBgit shuffle cba\fP swaps the first and third
commits, \fBgit shuffle cab\fP pops the third commit to be the most
recent, top commit on the branch.

.SH OPTIONS
\fB\-h, \-\-help\fP: show this help message and exit

\fB\-q, \-\-quiet\fP: Suppress all output

\fB\-v, \-\-verbose\fP: Report all messages in great detail

\fB\-s [SQUASH], \-\-squash [SQUASH]\fP: Squash all commits into one. If an argument is provided, use it as the commit message.

\fB\-n, \-\-no\-run\fP: If set, commands will be printed but not executed


\fBshuffle\fP: Pattern string to shuffle


.SH DANGER
Rewrites history!

.SH EXAMPLES
.TP
.B \fB git shuffle 10 \fP
.TP
.B \fB git shuffle ba \fP
Switches the first and second most recent commits

.sp
.TP
.B \fB git shuffle ab \fP
.TP
.B \fB git shuffle abc \fP
.TP
.B \fB git shuffle 01 \fP
.TP
.B \fB git shuffle 012 \fP
Do nothing

.sp
.TP
.B \fB git shuffle cab \fP
.TP
.B \fB git shuffle 201 \fP
Cycles the three most recent commits so the third one is first

.sp
.TP
.B \fB git shuffle edcg \fP
.TP
.B \fB git shuffle 5437 \fP
Deletes the most recent two commeits, reverses the next three, and
deletes the sixth.

.sp
.TP
.B \fB git shuffle edcg \-s 'My message' \fP
.TP
.B \fB git shuffle edcg \-\-squash='My message' \fP
.TP
.B \fB git shuffle 5437 \-s "My message" \fP
Same as the previous command, but squashes the three commits into
one with the commit message 'My message'

