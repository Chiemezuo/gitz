.TH GIT-SAVE 1 "08 November, 2019" "Gitz 0.9.13" "Gitz Manual"

.SH NAME
git-save - Save and restore state of the git repository

.SH SYNOPSIS
.sp
.nf
.ft C
git save [-h] [-q] [-v] [-a] [-d] [-n] [state]
.ft P
.fi


.SH DESCRIPTION
Saves and restores the whole state of the git repository
including files staged but not commited, and (optionally) untracked
files.

.sp
\-\-\-

.sp
You don't need to understand the following to use git\-save.
This is just for people who need to know how things work behind the
scenes.

.sp
A git\-save "record" has up to five parts:

.sp
1. The most recent commit (HEAD at the time that git\-save was called)
2. Modified, staged files
3. Modified, unstaged files
4. Untracked files
5. The hash stash

.sp
git\-save starts at HEAD, and adds "hidden" commits for any of
parts 2, 3 and 4 which is non\-empty, to get a "final" commit ID.

.sp
Finally, the hash stash!  A tiny text file is added after these which
contains only the hash of the final commit, and then this is stashed.

.sp
When restoring a save file, the hash is popped from the stash to
\fBgit reset\fP to the "final" commit ID, and then working backwards to HEAD
restores the full state.

.SH OPTIONS
\fB\-h, \-\-help\fP: show this help message and exit

\fB\-q, \-\-quiet\fP: Suppress all output

\fB\-v, \-\-verbose\fP: Report all messages in great detail

\fB\-a, \-\-all\fP: Save even untracked files

\fB\-d, \-\-do_not_stash\fP: If set, do not stash the commit ID, just print it out

\fB\-n, \-\-no\-run\fP: If set, commands will be printed but not executed


\fBstate\fP: Save to this state if set. Otherwise, print a commit ID that saves this state.


.SH DANGER
Rewrites history!

.SH EXAMPLES
.TP
.B \fB git save \fP
Saves everything except untracked files

.sp
.TP
.B \fB git save \-a \fP
.TP
.B \fB git save \-\-all \fP
Saves everything including untracked files: only .gitignored files
will not be saved this way.

