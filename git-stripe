#!/usr/bin/env python3
from gitz import git_functions
from gitz.program import PROGRAM
from gitz.program import git
from gitz.program import safe_git

SUMMARY = 'Push a sequence of commit IDs to the origin repo'

USAGE = """
git stripe [<number-of-commits>] [commit-id]
[-b/--prefix=<prefix>] [-r/remove]
"""

HELP = """
Starting with a given commit ID, and moving backwards from there,
push each commit ID to its own disposable branch name.

Useful if CI has missed some of your commit IDs because you rebased or
pushed a sequences of commits too fast.
"""

EXAMPLES = """
Assume current branch is master:

git stripe
    Pushes HEAD~, HEAD~2 and HEAD~3 into their own branches named
    _gitz_stripe_master_0, _gitz_stripe_master_1
    and _gitz_stripe_master_2

git stripe --remove
git stripe -r
    Remove any branches named _gitz_stripe_master_0,
    _gitz_stripe_master_1 and _gitz_stripe_master_2.

    git-stripe -d does not fail if some or all of the branches
    to be removed are missing

git stripe --base-branch=BBBB
git stripe -b=BBBB
    Pushes HEAD~, HEAD~2 and HEAD~3 into their own branches named
    BBBB_0, BBBB_1, BBBB_2

git stripe --count=2 --base-branch=BBBB
git stripe -c=2 -b=BBBB
    Pushes HEAD~ and HEAD~2 into their own branches named BBBB_0
    and BBBB_1
"""

PREFIX = '_gitz_stripe_'
BAD_BRANCH_CHARS = frozenset('~^: ')
_FMT = '{commit_id}~{i}:refs/heads/{prefix}{i}'
_REMOVE_FMT = ':refs/heads/{prefix}{i}'


def git_stripe():
    args = PROGRAM.args
    cid = args.commit_id or 'HEAD~'
    commit_id = git_functions.commit_id(cid, short=True)
    if not commit_id:
        PROGRAM.exit('Cannot resolve "%s" to a commit ID' % cid)

    if BAD_BRANCH_CHARS.intersection(args.prefix):
        PROGRAM.exit(_ERROR_BRANCH_NAME, args.prefix)
    prefix = args.prefix or PREFIX + cid

    if not args.origin:
        try:
            origin, _ = git_functions.upstream_branch()
        except Exception:
            PROGRAM.exit('Branch has no origin and --origin not set')

    elif args.origin in safe_git.remotes():
        origin = args.origin

    else:
        PROGRAM.exit('Unknown origin', args.origin)

    if prefix.startswith('_') or not prefix:
        prefix = args.prefix
    else:
        prefix = '_' + args.prefix

    if args.remove_all:
        prefix = args.prefix or PREFIX
        for branch in git_functions.all_branches()[origin]:
            if branch.startswith(prefix):
                git.push(origin, ':refs/heads/' + branch, quiet=True)
                PROGRAM.log.message('Removed', '%s/%s' % (origin, branch))
        return

    if not prefix:
        if not args.commit_id:
            prefix = PREFIX

        elif BAD_BRANCH_CHARS.intersection(args.commit_id):
            prefix = PREFIX + commit_id + '_'

        else:
            prefix = PREFIX + args.commit_id + '_'

    for i in range(args.count):
        refspec_format = _REMOVE_FMT if args.remove else _FMT
        refspec = refspec_format.format(**locals())
        force = git_functions.force_flags()
        git.push(*force, origin, refspec, quiet=True)
        action = 'Removed' if args.remove else 'Striped'
        PROGRAM.log.message(action, refspec.split('/')[-1])


def add_arguments(parser):
    add = parser.add_argument

    add('count', default=3, nargs='?', type=int, help=_HELP_COUNT)

    add('-R', '--remove-all', action='store_true', help=_HELP_REMOVE_ALL)
    add('-c', '--commit_id', default='', help=_HELP_COMMIT_ID)
    add('-f', '--force', action='store_true', help=_HELP_FORCE)
    add('-o', '--origin', action='store_true', help=_HELP_ORIGIN)
    add('-p', '--prefix', type=str, default='', help=_HELP_PREFIX)
    add('-r', '--remove', action='store_true', help=_HELP_REMOVE)


_ERROR_BRANCH_NAME = 'Illegal character in branch name'

_HELP_PREFIX = 'Base name for stripe branches (autogenerated if none)'
_HELP_COMMIT_ID = 'Branch/commit ID of the first stripe (or HEAD~ if none)'
_HELP_COUNT = 'The number of stripe branches to be created'
_HELP_FORCE = 'Force push over existing stripes'
_HELP_REMOVE = 'Remove the striped branches for this request'
_HELP_REMOVE_ALL = 'Remove all striped branches'
_HELP_ORIGIN = 'Remote origin to push to'


if __name__ == '__main__':
    PROGRAM.start(**globals())
