#!/usr/bin/env python3
from gitz import git_functions
from gitz import program
from gitz.git import GIT

USAGE = """\
git-stripe: Stripes one or more branches onto a remote repository

USAGE:
    git stripe [<number-of-commits>] [commit-id] [baseref]
"""

HELP = """
"""
PROGRAM = program.Program(USAGE, HELP)
PREFIX = '_gitz_stripe_'
BAD_BRANCH_CHARS = frozenset('~^: ')
FORMATS = (
    '{commit_id}~{i}:refs/heads/{base_branch}{i}',
    ':refs/heads/{base_branch}{i}',  # -d set
)


def git_stripe():
    args = PROGRAM.parse_args(_add_arguments)
    commit_id = args.commit_id or 'HEAD~'
    commit_id = git_functions.check_commit_id(commit_id, PROGRAM)

    if BAD_BRANCH_CHARS.intersection(args.branch_base):
        PROGRAM.error_and_exit(_ERROR_BRANCH_NAME, args.branch_base)
    branch_base = args.branch_base or PREFIX + args.commit_id

    if not args.remote:
        upstream, _ = git_functions.upstream_branch()

    elif args.remote in GIT.remotes():
        upstream = args.remote

    else:
        PROGRAM.error_and_exit('Unknown remote', args.remote)

    branch_base = args.branch_base
    if args.branch_base:
        branch_base = args.branch_base
    elif not args.commit_id:
        base_branch = PREFIX
    elif BAD_BRANCH_CHARS.intersection(args.commit_id):
        base_branch = PREFIX + commit_id + '_'
    else:
        base_branch = PREFIX + args.commit_id + '_'

    for i in range(args.count):
        refspec_format = FORMATS[args.delete]
        refspec = refspec_format.format(**locals())
        GIT.push(upstream, refspec)


def _add_arguments(parser):
    add = parser.add_argument
    add('count', type=int, nargs='?', default=3, help=_HELP_COUNT)
    add('commit_id', default='', nargs='?', help=_HELP_COMMIT_ID)
    add('branch_base', default='', nargs='?', help=_HELP_BRANCH_BASE)
    add('-d', '--delete', action='store_true', help=_HELP_DEL)
    add('-r', '--remote', action='store_true', help=_HELP_REMOTE)


_ERROR_BRANCH_NAME = 'Illegal character in branch name'

_HELP_BRANCH_BASE = 'Base name for stripe branches (autogenerated if none)'
_HELP_COMMIT_ID = 'Branch/commit ID of the first stripe (or HEAD~ if none)'
_HELP_COUNT = 'The number of stripe branches to be created'
_HELP_DEL = 'Delete the striped branches'
_HELP_REMOTE = 'Remote to push to (uses the upstream for this branch if none)'


if __name__ == '__main__':
    git_stripe()
