#!/usr/bin/env python3
from gitz import git_functions
from gitz.program import PROGRAM

USAGE = """\
git-stripe: Push a sequence of commit IDs onto separate remote branches

USAGE:
    git stripe [<number-of-commits>] [commit-id]
               [-b/--branch_base=<branch_base>] [-d/delete]
"""

HELP = """
Starting with a given commit ID and moving backwards from there,
push each commit ID to its own disposable branch name.

Useful if CI has missed some of your commit IDs because you rebased or pushed
a sequences of commits too fast.

EXAMPLES:

    git stripe
        If the current branch is master, pushes HEAD~, HEAD~2 and
        HEAD~3 into their own branches named _gitz_stripe_master_0,
        _gitz_stripe_master_1 and _gitz_stripe_master_2

    git stripe --delete
    git stripe -d
        Delete the branches named _gitz_stripe_master_0,
        _gitz_stripe_master_1 and _gitz_stripe_master_2

    git stripe --base-branch=_gs
    git stripe -b=_gs
        Pushes HEAD~, HEAD~2 and HEAD~3 into their own branches named
        _gs_0, _gs_1, _gs_2

    git stripe --count=2 --base-branch _gs
    git stripe -c=2 -b=_gs
        Pushes HEAD~ and HEAD~2 into their own branches named _gs_0
        and _gs_1
"""

PREFIX = '_gitz_stripe_'
BAD_BRANCH_CHARS = frozenset('~^: ')
FORMATS = (
    '{commit_id}~{i}:refs/heads/{branch_base}{i}',
    ':refs/heads/{branch_base}{i}',  # --delete set
)
_FMT = '{commit_id}~{i}:refs/heads/{branch_base}{i}'
_DELETE_FMT = ':refs/heads/{branch_base}{i}'


def git_stripe():
    args = PROGRAM.args
    cid = args.commit_id or 'HEAD~'
    commit_id = git_functions.commit_id(cid, short=True)
    if not commit_id:
        PROGRAM.exit('Cannot resolve "%s" to a commit ID' % cid)

    if BAD_BRANCH_CHARS.intersection(args.branch_base):
        PROGRAM.exit(_ERROR_BRANCH_NAME, args.branch_base)
    branch_base = args.branch_base or PREFIX + args.commit_id

    if not args.remote:
        upstream, _ = git_functions.upstream_branch()

    elif args.remote in PROGRAM.git.remotes():
        upstream = args.remote

    else:
        PROGRAM.exit('Unknown remote', args.remote)

    branch_base = args.branch_base
    if args.branch_base:
        branch_base = args.branch_base

    elif not args.commit_id:
        branch_base = PREFIX

    elif BAD_BRANCH_CHARS.intersection(args.commit_id):
        branch_base = PREFIX + commit_id + '_'

    else:
        branch_base = PREFIX + args.commit_id + '_'

    for i in range(args.count):
        refspec_format = _DELETE_FMT if args.delete else _FMT
        refspec = refspec_format.format(**locals())
        PROGRAM.git.push(upstream, refspec)


def add_arguments(parser):
    add = parser.add_argument

    add('commit_id', default='', nargs='?', help=_HELP_COMMIT_ID)

    add('-b', '--branch_base', type=str, default='', help=_HELP_BRANCH_BASE)
    add('-c', '--count', type=int, default=3, help=_HELP_COUNT)
    add('-d', '--delete', action='store_true', help=_HELP_DEL)
    add('-r', '--remote', action='store_true', help=_HELP_REMOTE)


_ERROR_BRANCH_NAME = 'Illegal character in branch name'

_HELP_BRANCH_BASE = 'Base name for stripe branches (autogenerated if none)'
_HELP_COMMIT_ID = 'Branch/commit ID of the first stripe (or HEAD~ if none)'
_HELP_COUNT = 'The number of stripe branches to be created'
_HELP_DEL = 'Delete the striped branches'
_HELP_REMOTE = 'Remote to push to (uses the upstream for this branch if none)'


if __name__ == '__main__':
    PROGRAM.run(**globals())
