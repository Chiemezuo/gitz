#!/usr/bin/env python3
from gitz import git_functions
from gitz.program import PROGRAM
from gitz.program import git

SUMMARY = 'Push a sequence of commit IDs to the origin repo'

USAGE = """
git stripe [<number-of-commits>] [commit-id]
[-b/--prefix=<prefix>] [-d/delete]
"""

HELP = """
Starting with a given commit ID, and moving backwards from there,
push each commit ID to its own disposable branch name.

Useful if CI has missed some of your commit IDs because you rebased or
pushed a sequences of commits too fast.
"""

EXAMPLES = """
Assume current branch is master:

git stripe
    Pushes HEAD~, HEAD~2 and HEAD~3 into their own branches named
    _gitz_stripe_master_0, _gitz_stripe_master_1
    and _gitz_stripe_master_2

git stripe --delete
git stripe -d
    Delete any branches named _gitz_stripe_master_0,
    _gitz_stripe_master_1 and _gitz_stripe_master_2.

    git-stripe -d does not fail if some or all of the branches
    to be deleted are missing

git stripe --base-branch=BBBB
git stripe -b=BBBB
    Pushes HEAD~, HEAD~2 and HEAD~3 into their own branches named
    BBBB_0, BBBB_1, BBBB_2

git stripe --count=2 --base-branch=BBBB
git stripe -c=2 -b=BBBB
    Pushes HEAD~ and HEAD~2 into their own branches named BBBB_0
    and BBBB_1
"""

PREFIX = '_gitz_stripe_'
BAD_BRANCH_CHARS = frozenset('~^: ')
_FMT = '{commit_id}~{i_offset}:refs/heads/{prefix}{i}'
_DELETE_FMT = ':refs/heads/{prefix}{i}'


def git_stripe():
    args = PROGRAM.args
    cid, count = args.commit_id, args.count

    if len(count) >= 7 or not count.isnumeric():
        cid, count = count, cid

    try:
        count = int(count)
    except ValueError:
        PROGRAM.exit('Cannot understand count =', count)

    cid = cid or 'HEAD~'
    commit_id = git_functions.commit_id(cid, short=True)
    if not commit_id:
        PROGRAM.exit('Cannot resolve "%s" to a commit ID' % cid)

    if BAD_BRANCH_CHARS.intersection(args.prefix):
        PROGRAM.exit(_ERROR_BRANCH_NAME, args.prefix)
    prefix = args.prefix or PREFIX + cid

    all_remotes = git_functions.all_branches()
    remotes = []
    for remote in args.remotes.split(':'):
        if remote == '^':
            try:
                remote, _ = git_functions.upstream_branch()
            except Exception:
                PROGRAM.exit('Branch has no upstream remote')
        elif remote != '.' and remote not in all_remotes:
            PROGRAM.exit('Unknown remote', remote)

        remotes.append(remote)

    prefix = args.prefix
    if not prefix.startswith('_'):
        prefix = '_' + prefix

    if args.delete_all:
        prefix = prefix or PREFIX
        for remote in remotes:
            for branch in all_remotes[remote]:
                if branch.startswith(prefix):
                    git.push(remote, ':refs/heads/' + branch, quiet=True)
                    PROGRAM.log.message('Deleted', '%s/%s' % (remote, branch))
        return

    indexes = range(args.offset, args.offset + count)

    if not (args.force or args.delete):
        branches = {prefix + str(i) for i in indexes}
        all_branches = set()
        for br in all_remotes.values():
            all_branches.update(br)

        existing = branches.intersection(all_branches)
        if existing:
            PROGRAM.exit('Cannot overwrite existing', *existing)

    for i in indexes:
        i_offset = i - args.offset
        refspec_format = _DELETE_FMT if args.delete else _FMT
        refspec = refspec_format.format(**locals())
        force = git_functions.force_flags()
        for remote in remotes:
            git.push(*force, remote, refspec, quiet=True)
        action = 'Deleted' if args.delete else 'Created'
        PROGRAM.log.message(action, refspec.split('/')[-1])


def add_arguments(parser):
    add = parser.add_argument

    add('count', default='3', nargs='?', help=_HELP_COUNT)
    add('commit_id', default='', nargs='?', help=_HELP_COMMIT_ID)

    add('-D', '--delete-all', action='store_true', help=_HELP_DELETE_ALL)
    add('-d', '--delete', action='store_true', help=_HELP_DELETE)
    add('-f', '--force', action='store_true', help=_HELP_FORCE)
    add('-o', '--offset', default=0, type=int, help=_HELP_OFFSET)
    add('-p', '--prefix', default=PREFIX, help=_HELP_PREFIX)
    add('-r', '--remotes', default='^', help=_HELP_REMOTE)


_ERROR_BRANCH_NAME = 'Illegal character in branch name'

_HELP_COMMIT_ID = 'Branch/commit ID of the first stripe (or HEAD~ if none)'
_HELP_COUNT = 'The number of stripe branches to be created'
_HELP_DELETE = 'Delete the striped branches for this request'
_HELP_DELETE_ALL = 'Delete all striped branches'
_HELP_FORCE = 'Force push over existing stripes'
_HELP_PREFIX = 'Base name for stripe branches (autogenerated if none)'
_HELP_OFFSET = 'Offset to start numbering stripes'
_HELP_REMOTE = (
    'One or more remote remotes to push to, separated by colon. '
    '  "." means the local repo, "^" means the upstream repo'
)

if __name__ == '__main__':
    PROGRAM.start(**globals())
