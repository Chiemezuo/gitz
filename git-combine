#!/usr/bin/env python3
from gitz import git_functions
from gitz import program
from gitz.git import GIT

USAGE = """\
git-combine: Combine multiple commits into one

USAGE:
    git-combine <base-commit> [<additional-commit> ...<additional-commit>]
        [--preserve-conflict | -p]
"""
HELP = """
Combines a series of commits by hard resetting to the first one and then
cherry picking each successive one on top.

By default, if there is an error in the cherry-picking, it is
reported, and then the branch gets reverted to where it was before
git-combine started... unless the --preserve-conflict / -p flag is
set, in which case the branch stays right at the broken cherry-pick.

EXAMPLES:
    git combine master d2dfe0c a2833bc
        Goes to the commit in `master` and then cherry picks the two commits
        d2dfe0c and a2833bc on top of it.

    git combine -p HEAD x-branch
    git combine --preserve-conflict HEAD x-branch
        Basically the same as ``git cherry-pick x-branch``
"""
PROGRAM = program.Program(USAGE, HELP)


def git_combine():
    args = PROGRAM.parse_args(_add_arguments)
    PROGRAM.check_clean_workspace()
    commit_id = git_functions.commit_id()
    ids, errors = [], []
    for id in (args.base, *args.commit_id):
        try:
            ids.append(git_functions.commit_id(id))
        except Exception:
            errors.append(id)

    if errors:
        PROGRAM.error_and_exit('Not commit IDs:', *errors)

    try:
        base, *commits = ids
        GIT.reset('--hard', base)
        for id in commits:
            GIT.git('cherry-pick', id)
    except Exception as e:
        if not args.preserve_conflict:
            GIT.reset('--hard', commit_id)
        PROGRAM.error_and_exit('In git:', e)


def _add_arguments(parser):
    add_arg = parser.add_argument
    add_arg('base', help='Base commit to combine from')
    add_arg('commit_id', nargs='+', help='List of commit IDs to cherry pick')

    boolean_flags = (
        ('preserve-conflict', 'Do not revert the workspace on failure'),
    )
    for flag, help in boolean_flags:
        add_arg('-' + flag[0], '--' + flag, action='store_true', help=help)


def _git(*cmd, **kwds):
    for line in GIT.git(*cmd, **kwds):
        if GIT.verbose:
            print(line)


if __name__ == '__main__':
    git_combine()
