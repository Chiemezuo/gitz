#!/usr/bin/env python3
from gitz import combine
from gitz.program import PROGRAM

USAGE = """\
git-combine: Combine multiple commits into one

USAGE:
    git-combine <base-commit> [<additional-commit> ...<additional-commit>]
        [--preserve-conflict | -p]
"""
HELP = """
Combines a series of commits by hard resetting to the first one and then
cherry picking each successive one on top.

By default, if there is an error in the cherry-picking, it is
reported, and then the branch gets reverted to where it was before
git-combine started... unless the --preserve-conflict / -p flag is
set, in which case the branch stays right at the broken cherry-pick.

EXAMPLES:
    git combine master d2dfe0c a2833bc
        Goes to the commit in `master` and then cherry picks the two commits
        d2dfe0c and a2833bc on top of it.

    git combine -p HEAD x-branch
    git combine --preserve-conflict HEAD x-branch
        Basically the same as ``git cherry-pick x-branch``
"""


def git_combine():
    args = PROGRAM.initialize(USAGE, HELP, _add_arguments)
    combine.combine(args, args.base, *args.commit_id)


def _add_arguments(parser):
    add_arg = parser.add_argument
    add_arg('base', help='Base commit to combine from')
    add_arg('commit_id', nargs='+', help='List of commit IDs to cherry pick')
    combine.add_conflict_arguments(parser)


if __name__ == '__main__':
    git_combine()
