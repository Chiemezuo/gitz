#!/usr/bin/env python3
# See https://www.reddit.com/r/git/comments/ah1euu

# Automatically generated on 2019-06-25 at 14:35:31 by _make_single_files
# DO NOT EDIT THIS FILE BY HAND

import argparse
import os
import subprocess
import sys


def verbose():
    return any(a in ('-v', '--verbose') for a in sys.argv)


def git(*cmd, **kwds):
    cmd = ('git',) + cmd
    if verbose():
        print('$', *cmd)
    out = subprocess.check_output(('git',) + cmd, **kwds)
    lines = out.decode('utf-8').splitlines()
    return (i for i in lines if i.strip())


def cd_git_root():
    cwd = os.getcwd()
    while not os.path.isdir('.git'):
        parent = os.path.dirname(os.getcwd())
        if parent == os.getcwd():
            os.chdir(cwd)
            raise ValueError('Not a git directory: %s' % cwd)
        os.chdir(parent)


def clean_workspace():
    try:
        return git('diff-index', '--quiet', 'HEAD', '--') or True
    except Exception:
        return False


def branches():
    return [b.strip().replace('* ', '') for b in git('branch')]


def current_branch():
    return next(git('symbolic-ref', '--short', 'HEAD')).strip()


def get_argv():
    return ['-h' if i == '--help' else i for i in sys.argv[1:]]


def print_help(argv, usage=None):
    argv[:] = ['-h' if i == '--help' else i for i in argv]
    if '-h' in argv:
        usage and print(usage)
        print()
        return True


def numeric_flags(argv, flag):
    for i in argv:
        if i.startswith('-') and i[1:].isnumeric():
            yield flag
            yield i[1:]
        else:
            yield i


def commit_count(add_arguments, usage=None, commit_count=4):
    argv = get_argv()
    print_help(argv, usage)

    parser = argparse.ArgumentParser()
    add_arguments(parser)
    parser.add_argument(
        '-c',
        '--commit-count',
        default=commit_count,
        help='Number of commits per branch to show',
        type=int,
    )

    return parser.parse_args(list(numeric_flags(argv, '-c')))


def run_argv(usage, main):
    argv = get_argv()
    if not print_help(argv, usage):
        main(*argv)


USAGE = """
git-snip:

    Delete one or more commits by ID from your branch by position (0 being
    the current commit, 1 the one before it), or by commit ID.

    This command rewrites history.

Usage:
    git-snip <id> [<id> ...<id>]

All commits

"""
MAX_LINES = 100


def git_snip(*args):
    lines = git('log', '--oneline', '--%s' % MAX_LINES)
    ids = [i.split()[0].lower() for i in lines if i.strip()]
    indexes = []

    for a in args:
        try:
            index = ids.index(a.lower()[:7])
        except ValueError:
            if a.isnumeric() and int(a) <= MAX_LINES:
                index = int(a)
            raise
        if index in indexes:
            raise ValueError(
                'Duplicate commit index=%d ID=%s' % (index, ids[index])
            )

    for i in reversed(sorted(indexes)):
        git('rebase', 'HEAD~%d' % i, '--onto', 'HEAD~%d' % (i + 1))


if __name__ == '__main__':
    run_argv(USAGE, git_snip)
