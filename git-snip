#!/usr/bin/env python3

from gitz import git_functions
from gitz.commit_indexer import CommitIndexer
from gitz.program import PROGRAM

USAGE = """\
git-snip: Edit one or more commits out of history

USAGE:
    git-snip <id> [<id> ...]
"""
HELP = """"
Edit one or more commits IDs out of the current branch.

IDs 0, 1, 2, 3... are short for HEAD~0, HEAD~1, HEAD~2, HEAD~3...

This command rewrites history and is only intended for use on private
branches.

"""
_HELP_COMMIT_IDS = 'Names of commit_ids to create'


def git_snip():
    args = PROGRAM.initialize(USAGE, HELP, _add_arguments)
    git_functions.check_git()

    indexes = []
    errors = []
    dupes = []
    indexer = CommitIndexer()

    for a in args.commit_ids:
        try:
            index = indexer.index(a)
            if index in indexes:
                dupes.append(a)
            else:
                indexes.append(index)
        except Exception:
            errors.append(a)

    if errors:
        PROGRAM.error('Not commit IDs:', *errors)
    if dupes:
        PROGRAM.error('Duplicate IDs:', *dupes)
    if errors or dupes:
        PROGRAM.exit()

    for i in reversed(sorted(indexes)):
        'HEAD~%s' % i
        PROGRAM.git.rebase(('HEAD~%s' % i), '--onto', 'HEAD~%s' % (i + 1))


def _add_arguments(parser):
    parser.add_argument('commit_ids', nargs='+', help=_HELP_COMMIT_IDS)


if __name__ == '__main__':
    git_snip()
