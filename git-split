#!/usr/bin/env python3
import traceback
import _gitz
GIT = _gitz.GIT

USAGE = """
git-split:  Split a range of commits into many single-file commits

`git-split` squashes together a range of commits and the staging area, then
splits out a sequence of individual commits, one for each file changed.

Usage:
    git-split
        Splits the staging area if it's not empty, otherwise HEAD

    git-split HEAD
        Splits the squash of the staging area and HEAD

    git-split HEAD~
        Splits the squash of the staging area, HEAD and HEAD~
"""


def git_split(commit=None):
    GIT.cd_root()

    if commit is not None:
        GIT.reset(commit + '~')
    elif not GIT.is_workspace_dirty():
        GIT.reset('HEAD~')

    splits = 0
    lines = GIT.status('--porcelain')

    for line in lines:
        mode, filename = line.split(None, 1)

        # Renaming is a special case with two files on a line
        # separated by -> and with mode = '??'
        filenames = filename.split(' -> ')
        try:
            if mode == '??':
                GIT.add(*filenames)
            GIT.commit('-m', '[split] %s' % filenames[0], *filenames)
            splits += 1

        except Exception:
            print('ERROR: couldn\'t commit filename %s.' % filename)
            traceback.print_exc()

    print('%d commit%s generated' % (splits, '' if splits == 1 else 's'))


if __name__ == '__main__':
    _gitz.run_argv(USAGE, git_split)
