#!/usr/bin/env python3

import os
import subprocess
import sys
import traceback

USAGE = """
git-split:  Split a range of commits into many single-file commits

`git-split` squashes together a range of commits and the staging area, then
splits out a sequence of individual commits, one for each file changed.

Usage:
    git-split
        Splits the staging area if it's not empty, otherwise HEAD

    git-split HEAD
        Splits the squash of the staging area and HEAD

    git-split HEAD~
        Splits the squash of the staging area, HEAD and HEAD~
"""


def git(*cmd, **kwds):
    out = subprocess.check_output(('git',) + cmd, **kwds)
    lines = out.decode('utf-8').splitlines()
    return (i for i in lines if i.strip())


def cd_git_root():
    while not os.path.isdir('.git'):
        parent = os.path.dirname(os.getcwd())
        if parent == os.getcwd():
            raise ValueError('Not in a git directory')
        os.chdir(parent)


def clean_workspace():
    try:
        return git('diff-index', '--quiet', 'HEAD', '--') or True
    except Exception:
        return False


def main(commit=None):
    cd_git_root()

    if commit is not None:
        git('reset', commit + '~')
    elif clean_workspace():
        git('reset', 'HEAD~')

    splits = 0
    lines = git('status', '--porcelain')

    for line in lines:
        mode, filename = line.split(None, 1)

        # Renaming is a special case with two files on a line
        # separated by -> and with mode = '??'
        filenames = filename.split(' -> ')
        try:
            if mode == '??':
                git('add', *filenames)
            git('commit', '-m', '[split] %s' % filenames[0], *filenames)
            splits += 1

        except Exception:
            print('ERROR: couldn\'t commit filename %s.' % filename)
            traceback.print_exc()

    print('%d commit%s generated' % (splits, '' if splits == 1 else 's'))


if any(h in sys.argv for h in ('-h', '--help')):
    print(USAGE)
else:
    main(*sys.argv[1:])
